# TODO: download neovim, plenary, lemmy-help by default if not configured in .plzconfig

def neovim_toolchain(name:str, version:str, hashes:list = [], visibility:list = ["PUBLIC"]):
    """
    Downloads Neovim from GitHub and exposes the nvim binary as the entry point :<name>|nvim.

    To use this rule, add the following to your .plzconfig:

    [BuildConfig]
    nvim-tool = //...:<name>|nvim

    Args:
        name: Name of the target.
        version: The version of Neovim to download.
        hashes: A list of possible hashes for the downloaded archive. Optional.
        visibility: Visibility specification. Defaults to public.
    """
    urls_by_os = {
        "darwin": f"https://github.com/neovim/neovim/releases/download/v{version}/nvim-macos.tar.gz",
        "linux": f"https://github.com/neovim/neovim/releases/download/v{version}/nvim-linux64.tar.gz",
    }
    if CONFIG.OS not in urls_by_os:
        fail(f'neovim_toolchain rule is not supported on OS: "{CONFIG.OS}"')

    download = remote_file(
        name = tag(name, "download"),
        url = urls_by_os[CONFIG.OS],
        hashes = hashes,
        out = f"nvim_{CONFIG.OS}_{version}.tar.gz",
    )

    return genrule(
        name = name,
        srcs = [download],
        cmd = [
            "mkdir _out",
            "tar -xf $SRCS -C _out",
            "mv _out/$(ls _out) $OUT",
        ],
        outs = [name],
        entry_points = {
            "nvim": f"{name}/bin/nvim"
        },
        binary = True,
        visibility = visibility,
        building_description = "Installing...",
    )

def neovim_plugin(name:str, srcs:list = [], deps:list = [], help_srcs:list = [], help_opts:list = [], visibility:list = ["PUBLIC"]):
    """
    Defines two Neovim plugin targets:
        1. <name> which collects the plugin's files for use by dependent neovim_lua_module and neovim_test targets.
        2. <name>_help_gen, a runnable target which generates a help file from Lua srcs using lemmy-help and copies it
        into the doc directory.
        2. <name>_help_gen_check, a runnable target which checks whether the help file needs to be regenerated. This is
        intended to be run in CI.

    Args:
        name: Name of the build target.
        srcs: Sources of the plugin. Optional.
        deps: Dependencies of the plugin. These should typically be neovim_lua_module targets. Optional.
        help_srcs: Lua sources to generate the help file from. Optional.
        help_opts: Options to pass to lemmy-help when generating the help file. Optional.
        visibility: Visibility specification. Defaults to public.
    """
    # The plugin directories like autoload, lua, plugin etc have to live in the root, so it doesn't make sense to allow
    # this target to be defined anywhere else.
    if package_name() != "":
        fail("neovim_plugin target must be defined in the root")

    plugin_srcs = filegroup(
        name = name,
        srcs = srcs,
        exported_deps = deps,
        visibility = visibility,
    )

    if help_srcs:
        lemmy_help = check_config(
            key = "LEMMY_HELP_TOOL",
            section = "BuildConfig",
            rule = "neovim_plugin",
            example = "//third_party/neovim:toolchain|nvim",
        )

        joined_opts = " ".join(help_opts)
        help_file_rule = genrule(
            name = tag(name, "help"),
            srcs = help_srcs,
            outs = [f"{name}.txt"],
            tools = [lemmy_help],
            cmd = f"$TOOL {joined_opts} $SRCS > $OUT",
        )

        help_file_path = f"doc/{name}.txt"
        help_gen = sh_cmd(
            name = f"{name}_help_gen",
            deps = [help_file_rule],
            cmd = f"mkdir -p doc && cp $(out_location {help_file_rule}) {help_file_path}",
        )

        sh_cmd(
            name = f"{name}_help_gen_check",
            deps = [help_file_rule],
            cmd = " ".join([
                f'diff --unified --color=always {help_file_path} $(out_location {help_file_rule})',
                f'&& echo "\033[32;1m{help_file_path} is up to date." && exit 0',
                f'|| echo "\n\033[31;1m{help_file_path} needs to be regenerated with \\"plz run //{help_gen}\\"" && exit 1',
            ]),
        )

    return plugin_srcs

def neovim_lua_module(name:str, srcs:list, deps:list = [], visibility:list = ["PUBLIC"]):
    """
    Defines a Lua module target which collects Lua files for use by dependent neovim_lua_module, neovim_plugin, and
    neovim_test targets.

    Args:
        name: Name of the build target.
        srcs: Lua sources of the module.
        deps: Dependencies of the module. These should be neovim_lua_module, neovim_plugin, or neovim_github_plugin
              targets. Optional.
        visibility: Visibility specification. Defaults to public.
    """
    return filegroup(
        name = name,
        srcs = srcs,
        exported_deps = deps,
        visibility = visibility,
    )

def neovim_test(name:str, test_file:str, deps:list = [], labels:list = [], nvim:str = None):
    """
    Defines a Neovim test target which runs a test file inside Neovim using plenary
    (https://github.com/nvim-lua/plenary.nvim).

    To use this rule you must have both nvim-tool and plenary-plugin configured under the [BuildConfig] section in your
    .plzconfig.
      - nvim-tool is the nvim binary used to run the test file. This can either be a path or the |nvim entry point which
        is generated by the neovim_toolchain build rule.
      - plenary-plugin is the plenary plugin to use. This should be a neovim_github_plugin target.

    For example:

    [BuildConfig]
    nvim-tool = //third_party/neovim:toolchain|nvim
    plenary-plugin = //third_party/neovim:plenary

    Args:
        name: Name of the build target.
        test_file: Test file to run.
        deps: Dependencies of the test. These should be neovim_lua_module, neovim_plugin, or neovim_github_plugin
              targets. Optional.
        labels: Labels to apply to this test. Optional.
        nvim: nvim binary used to run the test file. Overrides whatever is set for nvim-tool. This can either be a path
              or the |nvim entry point which is generated by the neovim_toolchain build rule. Optional.
    """
    if not nvim:
        nvim = check_config(
            key = "NVIM_TOOL",
            section = "BuildConfig",
            rule = "neovim_test",
            example = "//third_party/neovim:toolchain|nvim",
        )
    plenary = check_config(
        key = "PLENARY_PLUGIN",
        section = "BuildConfig",
        rule = "neovim_test",
        example = "//third_party/neovim:plenary",
    )

    # We build the runner as its own target so that we can use it to test the Junit XML report generator in
    # //tools/plenary-to-junit.
    runner = genrule(
        name = tag(name, "runner"),
        srcs = [test_file],
        deps = deps + [plenary],
        binary = True,
        needs_transitive_deps = True,
        tools = {
            "jarcat": CONFIG.JARCAT_TOOL,
            "nvim": nvim,
        },
        outs = [f"{name}_runner.sh"],
        # Generates an executable shell script which runs the given test file using plenary.
        # The structure of the script is similar to the one generated by the built in sh_binary rule in that it
        # contains:
        #   - A ZIP file containing the dependencies of the test file as well as plenary.
        #   - A command to unzip the dependencies.
        #   - A command to run the test file.
        # The main difference between this script and the sh_binary one is that sh_binary does
        # `unzip -qo $0 -d $(dirname $0)` which unzips the dependencies into the same directory as the script which is
        # unhelpful if the script is not in the root because it means that the test file's dependencies would not be
        # where it expects them to be.
        cmd = [
            '''echo '#!/bin/bash' >> "$TMPDIR"/_preamble.txt''',
            'echo "set -euo pipefail" >> "$TMPDIR"/_preamble.txt',
            # Unzip the dependencies from the script.
            'echo "unzip -qo \\\$0" >> "$TMPDIR"/_preamble.txt',
            # Third party dependencies (neovim_github_plugin targets) generate a *.runtimepath file containing the
            # path to the plugin root directory. This way, we can find all of the paths which need to be added to
            # Neovim's runtimepath by concatenating the contents of all of the *.runtimepath files in the build
            # directory (which were unzipped from the script). The tr and sed are just joining the paths with commas.
            '''runtimepaths="$(find . -name '*.runtimepath' | xargs cat | tr '\\n' ',' | sed 's/,$//g')"''',
            # Run the test file, passing in the runtimepaths which the previous command returned.
            'echo "$TOOLS_NVIM --clean --headless --cmd \\"set runtimepath+=.,$runtimepaths\\" -c \\"PlenaryBustedFile $SRC\\"" >> "$TMPDIR"/_preamble.txt',
            # Exit so that we don't try to execute the ZIP file at the end of the script.
            'echo "exit 0" >> "$TMPDIR"/_preamble.txt',
            # Create a ZIP file which is prefixed by the script which we've just created.
            '"$TOOLS_JARCAT" z -d -n -i . -o "$OUT" --preamble_file "$TMPDIR"/_preamble.txt --strip_prefix ./',
        ],
        visibility = ["PUBLIC"],
    )

    return gentest(
        name = name,
        # We disable pipefail so that we can set the exit code of the command in plenary-to-junit. This allows us to get
        # errors but no failures. around the bug where Please spits out "Test returned nonzero but reported no errors"
        # when a test returns
        test_cmd = "set +o pipefail && $TOOLS_RUNNER | $TOOLS_PLENARY_TO_JUNIT > $RESULTS_FILE",
        labels = labels,
        test_tools = {
            "runner": runner,
            "plenary_to_junit": "//tools/plenary-to-junit",
        },
    )

def neovim_github_plugin(name:str, repo:str, revision:str, hashes:list = [], visibility:list = ["PUBLIC"]):
    """
    Downloads a Neovim plugin from GitHub for use by dependent neovim_lua_module and neovim_test targets.

    Args:
        name: Name of the build target.
        repo: Repository to fetch from (e.g. "marcuscaisey/please.nvim").
        revision: Revision to download. This can be either a release version, commit or branch.
        hashes: List of hashes to verify the rule with.
        visibility: Visibility specification. Defaults to public.
    """
    org, _, repo = repo.partition('/')
    assert repo, "Must pass a valid GitHub repo argument, e.g. marcuscaisey/please.nvim"
    download = remote_file(
        name = tag(name, "download"),
        url = f'https://github.com/{org}/{repo}/archive/{revision}.zip',
        hashes = hashes,
        extract = True,
    )
    runtimepath = genrule(
        name = tag(name, "runtimepath"),
        srcs = [download],
        out = f"{name}.runtimepath",
        cmd = f"echo $SRC > $OUT",
    )
    return filegroup(
        name = name,
        srcs = [
            download,
            runtimepath,
        ],
        visibility = visibility,
    )

def neovim_github_tree_sitter_parser(name:str, lang:str, repo:str, revision:str, hashes:list = [], visibility:list = ['PUBLIC']):
    """
    Downloads a tree sitter parser from GitHub and compiles it for use by dependent neovim_lua_module and neovim_test targets.

    Args:
        name: Name of the build target.
        lang: Language that this parser is for.
        repo: Repository to fetch from (e.g. "marcuscaisey/please.nvim").
        revision: Revision to download. This can be either a release version, commit or branch.
        hashes: List of hashes to verify the rule with.
        visibility: Visibility specification. Defaults to public.
    """
    subrepo_build_file = text_file(
        name = tag(name, "subrepo_build_file"),
        content = """
COMPILER_FLAGS = [
    "-Wno-deprecated",
    "-Wno-unused-but-set-variable",
]

c_library(
    name = "c",
    srcs = glob("src/*.c"),
    hdrs = glob("src/tree_sitter/*.h"),
    compiler_flags = COMPILER_FLAGS,
    includes = ["src"],
    visibility = ["PUBLIC"],
)

cc_library(
    name = "cc",
    srcs = glob("src/*.cc"),
    hdrs = glob("src/tree_sitter/*.h"),
    compiler_flags = COMPILER_FLAGS,
    includes = ["src"],
    visibility = ["PUBLIC"],
)

cc_shared_object(
    name = "parser",
    deps = [":c", ":cc"],
    visibility = ["PUBLIC"],
)
        """,
    )
    subrepo_name = tag(name, 'subrepo')
    github_repo(
        name = subrepo_name,
        repo = repo,
        revision = revision,
        build_file = subrepo_build_file,
        hashes = hashes,
    )

    parser_target = '///' + join_path(package_name(), subrepo_name) + '//:parser'
    shared_object = genrule(
        name = tag(name, 'shared_object'),
        srcs = [parser_target],
        outs = [name],
        cmd = f'mkdir -p {name}/parser && cp $SRC {name}/parser/{lang}.so'
    )

    runtimepath = genrule(
        name = tag(name, 'runtimepath'),
        srcs = [shared_object],
        out = f'{name}.runtimepath',
        cmd = f'echo $SRC > $OUT',
    )

    return filegroup(
        name = name,
        srcs = [
            shared_object,
            runtimepath,
        ],
        visibility = visibility,
    )

def neovim_lemmy_help(name:str, version:str, hashes:list = [], visibility:list = ["PUBLIC"]):
    """
    Downloads lemmy-help from GitHub.

    To use this rule, add the following to your .plzconfig:

    [BuildConfig]
    lemmy-help-tool = //...:<name>

    Args:
        name: Name of the target.
        version: The version of lemmy-help to download.
        hashes: A list of possible hashes for the downloaded archive. Optional.
        visibility: Visibility specification. Defaults to public.
    """
    host_os_to_url = {
        "darwin": f"https://github.com/numToStr/lemmy-help/releases/download/v{version}/lemmy-help-x86_64-apple-darwin.tar.gz",
        "linux": f"https://github.com/numToStr/lemmy-help/releases/download/v{version}/lemmy-help-x86_64-unknown-linux-gnu.tar.gz",
    }
    if CONFIG.HOSTOS not in host_os_to_url:
        fail(f'neovim_lemmy_help rule is not supported on host OS: "{CONFIG.HOSTOS}"')

    return remote_file(
        name = name,
        url = host_os_to_url[CONFIG.HOSTOS],
        extract = True,
        exported_files = ["lemmy-help"],
        binary = True,
        hashes = hashes,
        visibility = visibility,
    )
