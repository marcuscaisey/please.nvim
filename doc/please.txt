================================================================================
NVIM                                                               *please.nvim*

please.nvim is a plugin which allows you interact with your Please repository
from the comfort of NeoVim.

COMMANDS                                                 *please-commands-intro*

Commands can be called either through the Lua or the VimL API.

Lua API~
Commands are exported by the `please` module, which can then be called like
`require("please").$command_name()`

For example, jump_to_target can be executed with
>
  require("please").jump_to_target()
<

VimL API~
Commands are called like `:Please $command_name`

For example, jump_to_target can be executed with
>
  :Please jump_to_target
<

Available Commands~
jump_to_target : jump to the build target of the current file
build : build a build target
test : test a build target
run : run a build target
yank : yank a build label
debug : debug a build target


See |please-commands| for more detailed descriptions of each command.

MAPPINGS                                                       *please-mappings*

please.nvim doesn't come with any mappings defined out of the box so that you
can customise how you use it. Below are some examples for each command to get
you started.

Example Mappings~
Lua:
>
  vim.keymap.set('n', '<leader>pj', require("please").jump_to_target, { silent = true })
  vim.keymap.set('n', '<leader>pb', require("please").build, { silent = true })
  vim.keymap.set('n', '<leader>pt', require("please").test, { silent = true })
  vim.keymap.set('n', '<leader>pct', function()
    require('please').test { under_cursor = true}
  end, { silent = true })
  vim.keymap.set('n', '<leader>plt', function()
    require('please').test { list = true}
  end, { silent = true })
  vim.keymap.set('n', '<leader>pft', function()
    require('please').test { failed = true}
  end, { silent = true })
  vim.keymap.set('n', '<leader>pr', require("please").run, { silent = true })
  vim.keymap.set('n', '<leader>py', require("please").yank, { silent = true })
  vim.keymap.set('n', '<leader>pd', require("please").debug, { silent = true })
<

VimL:
>
  nnoremap <leader>pj silent <cmd>Please jump_to_target<cr>
  nnoremap <leader>pb silent <cmd>Please build<cr>
  nnoremap <leader>pt silent <cmd>Please test<cr>
  nnoremap <leader>pct silent <cmd>Please test under_cursor<cr>
  nnoremap <leader>plt silent <cmd>Please test list<cr>
  nnoremap <leader>pft silent <cmd>Please test failed<cr>
  nnoremap <leader>pr silent <cmd>Please run<cr>
  nnoremap <leader>py silent <cmd>Please yank<cr>
  nnoremap <leader>pd silent <cmd>Please debug<cr>
<

DEBUG LOGS                                                   *please-debug-logs*

Debug logs can be enabled with
>
  :Please toggle_debug_logs
<

This will enable some basic logging about which functions are being called with
which arguments which should be enough to solve most problems. It will also
enable showing file / line numbers of error logs.



================================================================================
PLEASE-COMMANDS                                                *please-commands*

Some commands may prompt you to choose between different options. For example,
when building a file which is an input to multiple build targets, you'll be
prompted to choose which target to build. This prompt uses |vim.ui.select()|
which allows you to customise the appearance to your taste (see
https://github.com/stevearc/dressing.nvim and |lua-ui|).

please.jump_to_target()                              *please.jump_to_target()*
    Jumps to the location of the build target which takes the current file as
    an input.

    The cursor will be moved to where the build target is created if it can be
    found which should be the case for all targets except for those with names
    which are generated when the BUILD file is executed.



please.build()                                                *please.build()*
    If the current file is a BUILD file, builds the target which is under the
    cursor. Otherwise, builds the target which takes the current file as an
    input.



please.test({opts})                                            *please.test()*
    If the current file is a BUILD file, test the target which is under the
    cursor. Otherwise, test the target which takes the current file as an
    input.

    Optionally (when in a source file), you can run only a specific test.
    Either by running the test which is under the cursor or by choosing which
    test to run from a list of tests in the current file. This is supported for
    the following languages:
    - Go
     - regular test functions (not subtests)
     - testify suite test methods
    - Python
     - unittest test methods


    Parameters: ~
        {opts} (table)

    Fields: ~
        {under_cursor} (boolean)  run the test under the cursor
        {list}         (boolean)  select which test to run
        {failed}       (boolean)  run just the test cases which failed from
                                  the immediately previous run


please.run()                                                    *please.run()*
    If the current file is a BUILD file, run the target which is under the
    cursor. Otherwise, run the target which takes the current file as an input.



please.yank()                                                  *please.yank()*
    If the current file is a BUILD file, yank the label of the target which is
    under the cursor. Otherwise, yank the label of the target which takes the
    current file as an input.



please.debug()                                                *please.debug()*
    If the current file is a BUILD file, debug the target which is under the
    cursor. Otherwise, debug the target which takes the current file as an
    input.

    Debug support is provided by https://github.com/mfussenegger/nvim-dap. This
    is supported for the following languages:
    - Go (Delve)
    - Python (debugpy)




 vim:tw=78:ts=8:ft=help:norl:
