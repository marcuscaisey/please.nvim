================================================================================
                                                                   *please.nvim*

please.nvim is a plugin which allows you interact with your Please repository
from the comfort of NeoVim.

COMMANDS                                               *please-commands-intro*

Commands can be called either through the Lua or the VimL API.

Lua API~
Commands are exported by the `please` module, which can then be called like
`require("please").$command_name()`

For example, jump_to_target can be executed with
>
  require("please").jump_to_target()
<

VimL API~
Commands are called like `:Please $command_name`

For example, jump_to_target can be executed with
>
  :Please jump_to_target
<

Available Commands~
jump_to_target : jump to the build target of the current file
build : build a build target
test : test a build target
run : run a build target
yank : yank a build label


See |please-commands| for more detailed descriptions of each command.

MAPPINGS                                                     *please-mappings*

please.nvim doesn't come with any mappings defined out of the box so that you
can customise how you use it. Below are some examples for each command to get
you started.

Example Mappings~
Lua:
>
  vim.keymap.set('n', '<leader>pj', require("please").jump_to_target, { silent = true })
  vim.keymap.set('n', '<leader>pb', require("please").build, { silent = true })
  vim.keymap.set('n', '<leader>pt', require("please").test, { silent = true })
  vim.keymap.set('n', '<leader>pct', function()
    require('please').test { under_cursor = true}
  end, { silent = true })
  vim.keymap.set('n', '<leader>pr', require("please").run, { silent = true })
  vim.keymap.set('n', '<leader>py', require("please").yank, { silent = true })
<

VimL:
>
  nnoremap <leader>pj silent <cmd>Please jump_to_target<cr>
  nnoremap <leader>pb silent <cmd>Please build<cr>
  nnoremap <leader>pt silent <cmd>Please test<cr>
  nnoremap <leader>pct silent <cmd>Please test under_cursor<cr>
  nnoremap <leader>pr silent <cmd>Please run<cr>
  nnoremap <leader>py silent <cmd>Please yank<cr>
<

DEBUGGING                                                   *please-debugging*

Debug logs can be enabled with
>
  :Please toggle_debug_logs
<

This will enable some basic logging about which functions are being called with
which arguments which should be enough to solve most problems. It will also
enable showing file / line numbers of error logs.



================================================================================
                                                               *please-commands*

When using a command which involves the build target which takes the current
file as an input, there may be multiple targets found if the file is referenced
in multiple places. In such cases, you'll be prompted for which one to use.
This prompt uses |vim.ui.select()| which allows you to customise the appearance
to your taste (see https://github.com/stevearc/dressing.nvim and |lua-ui|).

please.jump_to_target()                              *please.jump_to_target()*
    Jumps to the location of the build target which takes the current file as
    an input.

    The cursor will be moved to where the build target is created if it can be
    found which should be the case for all targets except for those with names
    which are generated when the BUILD file is executed.



please.build()                                                *please.build()*
    If the current file is a BUILD file, builds the target which is under the
    cursor. Otherwise, builds the target which takes the current file as an
    input.



please.test({opts})                                            *please.test()*
    If the current file is a BUILD file, test the target which is under the
    cursor. Otherwise, test the target which takes the current file as an
    input.

    Optionally (when in a source file), you can specify that only the test
    function which is under the cursor should be run. This is supported for the
    following languages:
    - Go
     - regular go test functions (not subtests)
     - testify suite test methods
    - Python
     - unittest test methods


    Parameters: ~
        {opts} (table)

    Fields: ~
        {under_cursor} (boolean)  run only the test under the cursor


please.run()                                                    *please.run()*
    If the current file is a BUILD file, run the target which is under the
    cursor. Otherwise, run the target which takes the current file as an input.



please.yank()                                                  *please.yank()*
    If the current file is a BUILD file, yank the label of the target which is
    under the cursor. Otherwise, yank the label of the target which takes the
    current file as an input.




 vim:tw=78:ts=8:ft=help:norl:
