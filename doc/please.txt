*please.nvim*
A plugin to make you more productive in Neovim when using Please.

==============================================================================
Table of Contents                                              *please-contents*

INTRODUCTION ···················································· |please-intro|
USAGE ··························································· |please-usage|
MAPPINGS ····················································· |please-mappings|
PLEASE COMMANDS ······················································· |please|
LOGGING COMMANDS ·············································· |please.logging|

==============================================================================
INTRODUCTION                                                      *please-intro*

please.nvim is a plugin which allows you interact with your Please repository
from the comfort of Neovim. The aim is to remove the need to switch from your
editor to the shell when performing routine actions.

Features ~
  * Build, run, test, and debug a target
  * Yank a target's label
  * Jump from a source file to its build target definition
  * Display history of previous actions and run any of them again
  * `please` configured as the `filetype` for the following files:
    * `BUILD`
    * `*.plz`
    * `*.build_def`
    * `*.build_defs`
    * `*.build`
  * `ini` configured as the `filetype` for `.plzconfig` files to enable better
    syntax highlighting
  * `nvim-treesitter` configured to use the Python parser for `please` files
    to enable better syntax highlighting and use of all treesitter features in
    build files

==============================================================================
USAGE                                                             *please-usage*

Lua and VimL APIs ~
please.nvim commands can be called either through the Lua or the VimL API.
  * Commands are written in Lua and as such the Lua API should be preferred.
    It can't be guaranteed that all features available through the Lua API
    will also available through the VimL API.
  * The VimL API is mostly provided to make it easy to call commands from the
    command line.

To use the Lua API, you need to import the required module which will usually
be `please`. For instance, `jump_to_target` is executed with
`require('please').jump_to_target()`

All available VimL API commands are autocompletable as arguments to the
`:Please` command. For instance, `jump_to_target` is executed with
`:Please jump_to_target`

UI Customisation ~
Some commands may prompt you to either choose from a list of options or input
some text. For example, when building a file which is an input to multiple
build targets, you'll be prompted to choose which target to build.

Input and selection prompts are provided by |vim.ui.input()| and
|vim.ui.select()| respectively. Doing so allows you to customise the
appearance of them to your taste. See |lua-ui| and the fantastic
https://github.com/stevearc/dressing.nvim for more information.

==============================================================================
MAPPINGS                                                       *please-mappings*

please.nvim doesn't come with any mappings defined out of the box so that you
can customise how you use it. Below are a set of mappings for each available
command to get you started.
>lua
  vim.keymap.set('n', '<leader>pj', require('please').jump_to_target)
  vim.keymap.set('n', '<leader>pb', require('please').build)
  vim.keymap.set('n', '<leader>pt', require('please').test)
  vim.keymap.set('n', '<leader>pct', function()
    require('please').test({ under_cursor = true })
  end)
  vim.keymap.set('n', '<leader>pft', function()
    require('please').test({ failed = true })
  end)
  vim.keymap.set('n', '<leader>pr', require('please').run)
  vim.keymap.set('n', '<leader>py', require('please').yank)
  vim.keymap.set('n', '<leader>pd', require('please').debug)
  vim.keymap.set('n', '<leader>pa', require('please').action_history)
  vim.keymap.set('n', '<leader>pm', require('please').maximise_popup)
<

==============================================================================
PLEASE COMMANDS                                                         *please*

please.jump_to_target()                                  *please.jump_to_target*
    Jumps to the location of the build target which takes the current file as
    an input.

    The cursor will be moved to where the build target is created if it can be
    found which should be the case for all targets except for those with names
    which are generated when the `BUILD` file is executed.


please.build()                                                    *please.build*
    If the current file is a `BUILD` file, builds the target which is under
    the cursor. Otherwise, builds the target which takes the current file as
    an input.


please.test({opts})                                                *please.test*
    If the current file is a `BUILD` file, test the target which is under the
    cursor. Otherwise, test the target which takes the current file as an
    input.

    Optionally (when in a source file), you can run only the test which is
    under the cursor.
    This is supported for the following languages:
    - Go
      - test functions
      - subtests
      - table tests
      - testify suite methods
      - testify suite subtests
      - testify suite table tests
    - Python
      - unittest test classes
      - unittest test methods

    Parameters: ~
        {opts} (table|nil) available options
          * {under_cursor} (boolean): run the test under the cursor
          * {failed} (boolean): run just the test cases which failed from the
            immediately previous run


please.run()                                                        *please.run*
    If the current file is a `BUILD` file, run the target which is under the
    cursor. Otherwise, run the target which takes the current file as an
    input.


please.yank()                                                      *please.yank*
    If the current file is a `BUILD` file, yank the label of the target which is
    under the cursor. Otherwise, yank the label of the target which takes the
    current file as an input.


please.debug()                                                    *please.debug*
    If the current file is a `BUILD` file, debug the target which is under the
    cursor. Otherwise, debug the target which takes the current file as an
    input.

    Debug support is provided by https://github.com/mfussenegger/nvim-dap.
    This is supported for the following languages:
    - Go (Delve)
    - Python (debugpy)


please.action_history()                                  *please.action_history*
    Display a history of previous actions. Selecting one of them will run it
    again.


please.maximise_popup()                                  *please.maximise_popup*
    Maximises the popup which was most recently quit or minimised.


==============================================================================
LOGGING COMMANDS                                                *please.logging*

logging.toggle_debug()                             *please.logging.toggle_debug*
    Toggles debug logs containing which functions are being called with which
    arguments. This should provide enough information to debug most issues. To
    toggle debug logs from the command line, use `:Please toggle_debug_logs`


vim:tw=78:ts=8:noet:ft=help:norl:
