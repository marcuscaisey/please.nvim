================================================================================
                                                                   *please.nvim*

please.nvim is a plugin which allows you interact with your Please repository
from the comfort of NeoVim.

COMMANDS                                               *please-commands-intro*

Commands can be called either through the Lua or the VimL API.

Lua API~
Commands are exported by the `please` module, which can then be called like
`require("please").$command_name()`

For example, jump_to_target can be executed with
>
  require("please").jump_to_target()
<

VimL API~
Commands are called like `:Please $command_name`

For example, jump_to_target can be executed with
>
  :Please jump_to_target
<

Available Commands~
jump_to_target : jump to the build target of the current file
build : build the target of the current file
test : test the current file
test_under_cursor : run the test under the cursor

See |please-commands| for more detailed descriptions of each command.

MAPPINGS                                                     *please-mappings*

please.nvim doesn't come with any mappings defined out of the box so that you
can customise how you use it. Below are some examples for each command to get
you started.

Example Mappings~
Lua:
>
  vim.keymap.set('n', '<leader>pj', require("please").jump_to_target, { silent = true })
  vim.keymap.set('n', '<leader>pb', require("please").build, { silent = true })
  vim.keymap.set('n', '<leader>pt', require("please").test, { silent = true })
<

VimL:
>
  nnoremap <leader>pj silent <cmd>Please jump_to_target<cr>
  nnoremap <leader>pb silent <cmd>Please build<cr>
  nnoremap <leader>pt silent <cmd>Please test<cr>
<


================================================================================
                                                               *please-commands*

When using a command which involves the build target which takes the current
file as an input, there may be multiple targets found if the file is referenced
in multiple places. In such cases, you'll be prompted for which one to use.
This prompt uses |vim.ui.select()| which allows you to customise the appearance
to your taste (see https://github.com/stevearc/dressing.nvim and |lua-ui|).

please.jump_to_target()                              *please.jump_to_target()*
    Jumps to the location of the build target which takes the current file as
    an input.

    The cursor will be moved to where the build target is created if it can be
    found which should be the case for all targets except for those with names
    which are generated when the BUILD file is executed.



please.build()                                                *please.build()*
    Builds the target which takes the current file as an input.



please.test()                                                  *please.test()*
    Tests the target which takes the current file as an input.



please.test_under_cursor()                        *please.test_under_cursor()*
    Runs the test under the cursor in the target which takes the current file
    as an input.

    Supported languages:
    - Go
     - regular go test functions (not subtests)
     - testify suite test methods




 vim:tw=78:ts=8:ft=help:norl:
