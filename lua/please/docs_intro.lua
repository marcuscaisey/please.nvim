---@tag please.nvim

---@brief [[
--- please.nvim is a plugin which allows you interact with your Please repository from the comfort of NeoVim.
---
--- <pre>
--- COMMANDS                                                 *please-commands-intro*
--- </pre>
---
--- Commands can be called either through the Lua or the VimL API.
---
--- Lua API~<br>
--- Commands are exported by the `please` module, which can then be called like
--- `require("please").$command_name()`
---
--- For example, jump_to_target can be executed with
--- <code>
---   require("please").jump_to_target()
--- </code>
---
--- VimL API~<br>
--- Commands are called like `:Please $command_name`
---
--- For example, jump_to_target can be executed with
--- <code>
---   :Please jump_to_target
--- </code>
---
--- Available Commands~<br>
--- jump_to_target : jump to the build target of the current file<br>
--- build : build a build target<br>
--- test : test a build target<br>
--- run : run a build target<br>
--- yank : yank a build label<br>
--- debug : debug a build target<br>
--- action_history : list previously run actions<br>
---
--- See |please-commands| for more detailed descriptions of each command.
---
--- <pre>
--- MAPPINGS                                                       *please-mappings*
--- </pre>
---
--- please.nvim doesn't come with any mappings defined out of the box so that you can customise how you use it. Below
--- are some examples for each command to get you started.
---
--- Example Mappings~<br>
--- Lua:
--- <code>
---   vim.keymap.set('n', '<leader>pj', require("please").jump_to_target, { silent = true })
---   vim.keymap.set('n', '<leader>pb', require("please").build, { silent = true })
---   vim.keymap.set('n', '<leader>pt', require("please").test, { silent = true })
---   vim.keymap.set('n', '<leader>pct', function()
---     require('please').test({ under_cursor = true})
---   end, { silent = true })
---   vim.keymap.set('n', '<leader>plt', function()
---     require('please').test({ list = true})
---   end, { silent = true })
---   vim.keymap.set('n', '<leader>pft', function()
---     require('please').test({ failed = true})
---   end, { silent = true })
---   vim.keymap.set('n', '<leader>pr', require("please").run, { silent = true })
---   vim.keymap.set('n', '<leader>py', require("please").yank, { silent = true })
---   vim.keymap.set('n', '<leader>pd', require("please").debug, { silent = true })
---   vim.keymap.set('n', '<leader>pa', require("please").action_history, { silent = true })
--- </code>
---
--- VimL:
--- <code>
---   nnoremap <leader>pj silent <cmd>Please jump_to_target<cr>
---   nnoremap <leader>pb silent <cmd>Please build<cr>
---   nnoremap <leader>pt silent <cmd>Please test<cr>
---   nnoremap <leader>pct silent <cmd>Please test under_cursor<cr>
---   nnoremap <leader>plt silent <cmd>Please test list<cr>
---   nnoremap <leader>pft silent <cmd>Please test failed<cr>
---   nnoremap <leader>pr silent <cmd>Please run<cr>
---   nnoremap <leader>py silent <cmd>Please yank<cr>
---   nnoremap <leader>pd silent <cmd>Please debug<cr>
---   nnoremap <leader>pa silent <cmd>Please action_history<cr>
--- </code>
---
--- <pre>
--- DEBUG LOGS                                                   *please-debug-logs*
--- </pre>
---
--- Debug logs can be enabled with
--- <code>
---   :Please toggle_debug_logs
--- </code>
---
--- This will enable some basic logging about which functions are being called with which arguments which should be
--- enough to solve most problems. It will also enable showing file / line numbers of error logs.
---
---@brief ]]
